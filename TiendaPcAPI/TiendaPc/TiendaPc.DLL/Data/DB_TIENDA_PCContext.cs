// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace TiendaPc.DLL.Models;

public partial class DB_TIENDA_PCContext : DbContext
{
    public DB_TIENDA_PCContext(DbContextOptions<DB_TIENDA_PCContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Barrio> Barrios { get; set; }

    public virtual DbSet<CategoriaFiscal> CategoriasFiscales { get; set; }

    public virtual DbSet<Ciudad> Ciudades { get; set; }

    public virtual DbSet<Cliente> Clientes { get; set; }

    public virtual DbSet<Componente> Componentes { get; set; }

    public virtual DbSet<Contacto> Contactos { get; set; }

    public virtual DbSet<DetallePedido> DetallesPedidos { get; set; }

    public virtual DbSet<Empleado> Empleados { get; set; }

    public virtual DbSet<Especificacion> Especificaciones { get; set; }

    public virtual DbSet<EspecificacionComponente> EspecificacionesComponentes { get; set; }

    public virtual DbSet<FormaEntrega> FormasEntregas { get; set; }

    public virtual DbSet<FormaPago> FormasPagos { get; set; }

    public virtual DbSet<Marca> Marcas { get; set; }

    public virtual DbSet<Pedido> Pedidos { get; set; }

    //public virtual DbSet<PedidoFormaPago> PedidosFormasPagos { get; set; }

    public virtual DbSet<Provincia> Provincias { get; set; }

    public virtual DbSet<RolEmpleado> RolesEmpleados { get; set; }

    public virtual DbSet<TipoComponente> TiposComponentes { get; set; }

    public virtual DbSet<TipoComponenteEspecificacion> TiposComponentesEspecificaciones { get; set; }

    public virtual DbSet<TipoContacto> TiposContactos { get; set; }

    public virtual DbSet<TipoDocumento> TiposDocumentos { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Barrio>(entity =>
        {
            entity.HasKey(e => e.IdBarrio);

            entity.ToTable("BARRIOS");

            entity.Property(e => e.IdBarrio).HasColumnName("id_barrio");
            entity.Property(e => e.NombreBarrio)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("barrio");
            entity.Property(e => e.IdCiudad).HasColumnName("id_ciudad");

            entity.HasOne(d => d.IdCiudadNavigation).WithMany(p => p.Barrios)
                .HasForeignKey(d => d.IdCiudad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BARRIOS_CIUDADES");
        });

        modelBuilder.Entity<CategoriaFiscal>(entity =>
        {
            entity.HasKey(e => e.IdCategoriaFiscal);

            entity.ToTable("CATEGORIAS_FISCAL");

            entity.Property(e => e.IdCategoriaFiscal).HasColumnName("id_categoria_fiscal");
            entity.Property(e => e.NombreCategoriaFiscal)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("categoria_fiscal");
        });

        modelBuilder.Entity<Ciudad>(entity =>
        {
            entity.HasKey(e => e.IdCiudad);

            entity.ToTable("CIUDADES");

            entity.Property(e => e.IdCiudad).HasColumnName("id_ciudad");
            entity.Property(e => e.NombreCiudad)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ciudad");
            entity.Property(e => e.IdProvincia).HasColumnName("id_provincia");

            entity.HasOne(d => d.IdProvinciaNavigation).WithMany(p => p.Ciudades)
                .HasForeignKey(d => d.IdProvincia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CIUDADES_PROVINCIAS");
        });

        modelBuilder.Entity<Cliente>(entity =>
        {
            entity.HasKey(e => e.IdCliente);

            entity.ToTable("CLIENTES");

            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.Apellido)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("apellido");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Direccion)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("direccion");
            entity.Property(e => e.Documento)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("documento");
            entity.Property(e => e.Estado).HasColumnName("estado");
            entity.Property(e => e.IdBarrio).HasColumnName("id_barrio");
            entity.Property(e => e.IdTipoDoc).HasColumnName("id_tipo_doc");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.NroCalle).HasColumnName("nro_calle");

            entity.HasOne(d => d.IdBarrioNavigation).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IdBarrio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTES_BARRIOS");

            entity.HasOne(d => d.IdTipoDocNavigation).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IdTipoDoc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTES_TIPOS_DOCUMENTOS");
        });

        modelBuilder.Entity<Componente>(entity =>
        {
            entity.HasKey(e => e.IdComponente).HasName("PK_COMPONENTES");

            entity.Property(e => e.IdComponente).HasColumnName("id_componente");
            entity.Property(e => e.Estado).HasColumnName("estado");
            entity.Property(e => e.IdMarca).HasColumnName("id_marca");
            entity.Property(e => e.IdTipoComponente).HasColumnName("id_tipo_componente");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.Precio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("precio");
            entity.Property(e => e.Stock).HasColumnName("stock");
            entity.Property(e => e.StockMinimo).HasColumnName("stock_minimo");
            entity.Property(e => e.UrlImg)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("url_img");

            entity.HasOne(d => d.IdMarcaNavigation).WithMany(p => p.Componentes)
                .HasForeignKey(d => d.IdMarca)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPONENTES_MARCAS");

            entity.HasOne(d => d.IdTipoComponenteNavigation).WithMany(p => p.Componentes)
                .HasForeignKey(d => d.IdTipoComponente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPONENTES_TIPOS_COMPONENTES");
        });

        modelBuilder.Entity<Contacto>(entity =>
        {
            entity.HasKey(e => e.IdContacto);

            entity.ToTable("CONTACTOS");

            entity.Property(e => e.IdContacto).HasColumnName("id_contacto");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("contacto");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdTipoContacto).HasColumnName("id_tipo_contacto");
            entity.Property(e => e.LegajoEmp).HasColumnName("legajo_emp");
            entity.Property(e => e.Principal).HasColumnName("principal");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.Contactos)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_CONTACTOS_CLIENTES");

            entity.HasOne(d => d.IdTipoContactoNavigation).WithMany(p => p.Contactos)
                .HasForeignKey(d => d.IdTipoContacto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTACTOS_TIPOS_CONTACTOS");

            entity.HasOne(d => d.LegajoEmpNavigation).WithMany(p => p.Contactos)
                .HasForeignKey(d => d.LegajoEmp)
                .HasConstraintName("FK_CONCTACTOS_EMPLEADOS");
        });

        modelBuilder.Entity<DetallePedido>(entity =>
        {
            entity.HasKey(e => new { e.IdDetallePedido, e.IdPedido });

            entity.ToTable("DETALLES_PEDIDOS");

            entity.Property(e => e.IdDetallePedido).HasColumnName("id_detalle_pedido");
            entity.Property(e => e.IdPedido).HasColumnName("id_pedido");
            entity.Property(e => e.Cantidad).HasColumnName("cantidad");
            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("descuento");
            entity.Property(e => e.IdComponente).HasColumnName("id_componente");
            entity.Property(e => e.PrecioUnitario)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("precio_unitario");

            entity.HasOne(d => d.IdComponenteNavigation).WithMany(p => p.DetallesPedidos)
                .HasForeignKey(d => d.IdComponente)
                .HasConstraintName("FK_DETALLES_PEDIDOS_COMPONENTES");

            entity.HasOne(d => d.IdPedidoNavigation).WithMany(p => p.DetallesPedidos)
                .HasForeignKey(d => d.IdPedido)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DETALLES_PEDIDOS_PEDIDOS");
        });

        modelBuilder.Entity<Empleado>(entity =>
        {
            entity.HasKey(e => e.LegajoEmp);

            entity.ToTable("EMPLEADOS");

            entity.Property(e => e.LegajoEmp).HasColumnName("legajo_emp");
            entity.Property(e => e.Apellido)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("apellido");
            entity.Property(e => e.Direccion)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("direccion");
            entity.Property(e => e.Documento)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("documento");
            entity.Property(e => e.Estado).HasColumnName("estado");
            entity.Property(e => e.IdBarrio).HasColumnName("id_barrio");
            entity.Property(e => e.IdRol).HasColumnName("id_rol");
            entity.Property(e => e.IdTipoDoc).HasColumnName("id_tipo_doc");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.NroCalle).HasColumnName("nro_calle");
            entity.Property(e => e.Pass)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("pass");

            entity.HasOne(d => d.IdBarrioNavigation).WithMany(p => p.Empleados)
                .HasForeignKey(d => d.IdBarrio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EMPLEADOS_BARRIOS");

            entity.HasOne(d => d.IdRolNavigation).WithMany(p => p.Empleados)
                .HasForeignKey(d => d.IdRol)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EMPLEADOS_ROLES_EMPLEADO");

            entity.HasOne(d => d.IdTipoDocNavigation).WithMany(p => p.Empleados)
                .HasForeignKey(d => d.IdTipoDoc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EMPLEADOS_TIPOS_DOCUMENTOS");
        });

        modelBuilder.Entity<Especificacion>(entity =>
        {
            entity.HasKey(e => e.IdEspec);

            entity.ToTable("ESPECIFICACIONES");

            entity.Property(e => e.IdEspec).HasColumnName("id_espec");
            entity.Property(e => e.NombreEspecificacion)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("especificacion");
        });

        modelBuilder.Entity<EspecificacionComponente>(entity =>
        {
            entity.HasKey(e => new { e.IdEspecComp, e.IdComponente }).HasName("PK_ESPEC_COMP");

            entity.ToTable("Especificaciones_Componentes");

            entity.Property(e => e.IdEspecComp)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_espec_comp");
            entity.Property(e => e.IdComponente).HasColumnName("id_componente");
            entity.Property(e => e.IdEspec).HasColumnName("id_espec");
            entity.Property(e => e.Valor)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("valor");

            entity.HasOne(d => d.IdComponenteNavigation).WithMany(p => p.EspecificacionesComponentes)
                .HasForeignKey(d => d.IdComponente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESPEC_COMP_COMPONENTES");

            entity.HasOne(d => d.IdEspecNavigation).WithMany(p => p.EspecificacionesComponentes)
                .HasForeignKey(d => d.IdEspec)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESPEC_COMP_ESPECIFICACIONES");
        });

        modelBuilder.Entity<FormaEntrega>(entity =>
        {
            entity.HasKey(e => e.IdFormaEntrega);

            entity.ToTable("FORMAS_ENTREGA");

            entity.Property(e => e.IdFormaEntrega).HasColumnName("id_forma_entrega");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<FormaPago>(entity =>
        {
            entity.HasKey(e => e.IdFormaPago).HasName("Pk_FORMAS_PAGO");

            entity.ToTable("FORMAS_PAGO");

            entity.Property(e => e.IdFormaPago).HasColumnName("id_forma_pago");
            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("descuento");
            entity.Property(e => e.NombreFormaPago)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("forma_pago");
            entity.Property(e => e.Recargo)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("recargo");
        });

        modelBuilder.Entity<Marca>(entity =>
        {
            entity.HasKey(e => e.IdMarca);

            entity.Property(e => e.IdMarca).HasColumnName("id_marca");
            entity.Property(e => e.NombreMarca)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("marca");
        });

        modelBuilder.Entity<Pedido>(entity =>
        {
            entity.HasKey(e => e.IdPedido);

            entity.ToTable("PEDIDOS");

            entity.Property(e => e.IdPedido).HasColumnName("id_pedido");
            entity.Property(e => e.ArmadoPc).HasColumnName("armado_pc");
            entity.Property(e => e.FechaCancelacion)
                .HasColumnType("datetime")
                .HasColumnName("fechaCancelacion");
            entity.Property(e => e.FechaPedido)
                .HasColumnType("datetime")
                .HasColumnName("fecha_pedido");
            entity.Property(e => e.IdCategoriaFiscal).HasColumnName("id_categoria_fiscal");
            entity.Property(e => e.IdFormaPago).HasColumnName("id_forma_pago");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdFormaEntrega).HasColumnName("id_forma_entrega");
            entity.Property(e => e.LegajoEmp).HasColumnName("legajo_emp");
            entity.Property(entity => entity.Estado)
            .HasColumnName("estado")
            .HasMaxLength(50)
            .IsRequired()
            .IsUnicode(false);
            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("motivoCancelacion");
            entity.Property(e => e.PrecioArmadoPc)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("precio_armado_pc");

            entity.HasOne(d => d.IdCategoriaFiscalNavigation).WithMany(p => p.Pedidos)
                .HasForeignKey(d => d.IdCategoriaFiscal)
                .HasConstraintName("FK_PEDIDOS_CATEGORIAS_FISCAL");

            entity.HasOne(d => d.IdFormaPagoNavigation).WithMany(p => p.Pedidos)
                  .HasForeignKey(d => d.IdFormaPago)
                  .HasConstraintName("FK_PEDIDOS_FORMAS_PAGO");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.Pedidos)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDOS_CLIENTES");

            entity.HasOne(d => d.IdFormaEntregaNavigation).WithMany(p => p.Pedidos)
                .HasForeignKey(d => d.IdFormaEntrega)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDOS_FORMAS_ENTREGA");

            entity.HasOne(d => d.LegajoEmpNavigation).WithMany(p => p.Pedidos)
                .HasForeignKey(d => d.LegajoEmp)
                .HasConstraintName("FK_Id_Empleado_P");
        });

        //modelBuilder.Entity<PedidoFormaPago>(entity =>
        //{
        //    entity.HasKey(e => e.IdPedFor).HasName("Pk_PEDIDOS_FORMAS_PAGO");

        //    entity.ToTable("PEDIDOS_FORMAS_PAGO");

        //    entity.Property(e => e.IdPedFor).HasColumnName("id_ped_for");
        //    entity.Property(e => e.IdFormaPago).HasColumnName("id_forma_pago");
        //    entity.Property(e => e.IdPedido).HasColumnName("id_Pedido");
        //    entity.Property(e => e.Porcentaje)
        //        .HasColumnType("decimal(5, 2)")
        //        .HasColumnName("porcentaje");

        //    entity.HasOne(d => d.IdFormaPagoNavigation).WithMany(p => p.PedidosFormasPagos)
        //        .HasForeignKey(d => d.IdFormaPago)
        //        .HasConstraintName("Fk_PEDIDO_FORMAS_PAGO");

        //    entity.HasOne(d => d.IdPedidoNavigation).WithMany(p => p.PedidosFormasPagos)
        //        .HasForeignKey(d => d.IdPedido)
        //        .HasConstraintName("Fk_Id_Pedido_P");
        //});

        modelBuilder.Entity<Provincia>(entity =>
        {
            entity.HasKey(e => e.IdProvincia);

            entity.ToTable("PROVINCIAS");

            entity.Property(e => e.IdProvincia).HasColumnName("id_provincia");
            entity.Property(e => e.NombreProvincia)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("provincia");
        });

        modelBuilder.Entity<RolEmpleado>(entity =>
        {
            entity.HasKey(e => e.IdRol);

            entity.ToTable("ROLES_EMPLEADO");

            entity.Property(e => e.IdRol).HasColumnName("id_rol");
            entity.Property(e => e.DescRol)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("desc_rol");
            entity.Property(e => e.Rol)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rol");
        });

        modelBuilder.Entity<TipoComponente>(entity =>
        {
            entity.HasKey(e => e.IdTipoComponente);

            entity.ToTable("Tipos_Componentes");

            entity.Property(e => e.IdTipoComponente).HasColumnName("id_tipo_componente");
            entity.Property(e => e.Tipo)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("tipo");
        });

        modelBuilder.Entity<TipoComponenteEspecificacion>(entity =>
        {
            entity.HasKey(e => e.IdTipoEspec).HasName("PK_ID_TIPO_ESPEC");

            entity.ToTable("TIPOS_COMPONENTES_ESPECIFICACIONES");

            entity.Property(e => e.IdTipoEspec).HasColumnName("id_tipo_espec");
            entity.Property(e => e.IdEspec).HasColumnName("id_espec");
            entity.Property(e => e.IdTipoComponente).HasColumnName("id_tipo_componente");

            entity.HasOne(d => d.IdEspecNavigation).WithMany(p => p.TiposComponentesEspecificaciones)
                .HasForeignKey(d => d.IdEspec)
                .HasConstraintName("FK_TIPO_ESPEC_ESPEC");

            entity.HasOne(d => d.IdTipoComponenteNavigation).WithMany(p => p.TiposComponentesEspecificaciones)
                .HasForeignKey(d => d.IdTipoComponente)
                .HasConstraintName("FK_TIPO_ESPEC_COMP");
        });

        modelBuilder.Entity<TipoContacto>(entity =>
        {
            entity.HasKey(e => e.IdTipoContacto);

            entity.ToTable("TIPOS_CONTACTOS");

            entity.Property(e => e.IdTipoContacto).HasColumnName("id_tipo_contacto");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<TipoDocumento>(entity =>
        {
            entity.HasKey(e => e.IdTipoDoc);

            entity.ToTable("TIPOS_DOCUMENTOS");

            entity.Property(e => e.IdTipoDoc).HasColumnName("id_tipo_doc");
            entity.Property(e => e.NombreTipoDocumento)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_documento");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}